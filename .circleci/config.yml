version: 2.0

jobs:
  setup:
    docker:
      - image: circleci/node:10.16.3 # the primary container, where your job's commands are run
    steps:
      - checkout # check out the code in the project directory

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run: yarn install
      - run: cp yarn.lock yarn.lock.tmp
      - run: yarn add puppeteer
      - run: rm yarn.lock
      - run: mv yarn.lock.tmp yarn.lock

      # this yarn.lock copy and replace "hack" is to tie the cache after install puppeteer to yarn.lock file before install it

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "yarn.lock" }}

  lint:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      # build
      - run:
          name: Lint code
          command: yarn lint

  build:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run:
          name: Install Headless Chrome dependencies (for puppeteer)
          command: |
            sudo apt-get install -yq \
            gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
            fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget

      # build
      - run:
          name: Build site
          command: yarn build

      - persist_to_workspace:
          root: ./
          paths:
            - public

  preview:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-
      - attach_workspace:
          at: ./

      - run:
          name: Deploy to Netlify Preview
          command: yarn deploy:preview > netlify.log

      - run:
          name: Run Notify Script
          command: sh ./.circleci/notify.sh

  deploy:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-
      - attach_workspace:
          at: ./

      - run:
          name: Deploy to Netlify Production
          command: yarn deploy

  test:
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "yarn.lock" }}
            - v1-dependencies-

      - run:
          name: Unit test
          command: yarn test --ci --runInBand --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: 'reports/junit'
            JEST_JUNIT_OUTPUT_NAME: 'js-test-results.xml'

      - store_test_results:
          path: reports/junit

      - store_artifacts:
          path: reports/junit

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: '0 7 * * *'
          filters:
            branches:
              only: master
    jobs:
      - setup
      - build:
          requires:
            - setup
      - deploy:
          requires:
            - build
  install-build-and-test:
    jobs:
      - setup
      - test:
          requires:
            - setup
      - lint:
          requires:
            - setup
      - build:
          requires:
            - setup
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
      - preview:
          requires:
            - build
          filters:
            branches:
              ignore: master
